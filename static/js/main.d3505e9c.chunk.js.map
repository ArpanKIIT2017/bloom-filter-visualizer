{"version":3,"sources":["logo.svg","components/BloomFilterSettings.js","components/BloomFilter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","runCode","code","Function","BloomFilterSettings","props","useState","hashFns","setHashFns","filterSize","setFilterSize","txtCode","setTxtCode","addHashFn","fn","length","e","SyntaxError","alert","message","tryCode","onChange","map","style","borderStyle","paddingTop","paddingRight","paddingLeft","paddingBottom","id","type","min","max","placeholder","val","Number","target","value","console","log","overflow","maxHeight","hashFn","i","index","key","display","className","onClick","temp","filter","HashFn","rows","cols","BloomEntry","width","height","backgroundColor","borderColor","selected","delay","ms","ctr","rej","p","Promise","resolve","reject","setTimeout","cancel","clearTimeout","Error","BloomFilter","Array","from","bloomArray","setBloomArray","insElem","setInsElem","srchElem","setSrchElem","Set","selectedIndices","setSelectedIndices","findMsg","setFindMsg","useEffect","getHashes","item","findElement","a","hashes","hashOk","forEach","hash","flag","add","insertElement","xfilterSize","xhashFns","minWidth","has","disabled","App","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d3505e9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\n\nfunction runCode(code) {\n    return Function(`return ${code}`)();\n}\n\nfunction tryCode(code) {\n    try {\n        const fn = runCode(code);\n        \n        if (!(fn instanceof Function && fn.length > 0)) {\n            throw -1;\n        }\n        return true;\n    } catch (e) {\n        if (e instanceof SyntaxError) {\n            alert(e.message);\n        }\n        return false;\n    }\n}\n\nexport default function BloomFilterSettings(props) {\n    // Expected props\n    /**\n     * props.onChange\n     * \n     */\n\n    const [hashFns, setHashFns] = useState([]);\n    const [filterSize, setFilterSize] = useState(5);\n    const [txtCode, setTxtCode] = useState(`(item) => item.length % ${filterSize} // Modify`);\n\n    const HashFn = (hashFn, index) => {\n        return (\n            <div key={index} style={{display: 'grid-column'}}>\n                <div style={{borderStyle: 'ridge', paddingLeft: 8, paddingBottom: 4}}>\n                    <code className=\"code\">                    \n                        <pre>\n                        {hashFn}\n                        </pre>\n                    </code>\n                \n                    <span>\n                        <button onClick={() => {\n                            const temp = [...hashFns].filter((val, i) => i !== index);\n                            setHashFns(temp);\n                            props.onChange(filterSize, temp.map( (code) => runCode(code) ));\n                        }}>Delete</button>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n\n    const addHashFn = () => {\n        if (tryCode(txtCode)) {\n            setHashFns([...hashFns, txtCode]); setTxtCode(\"// Write your hash function....\");\n            props.onChange(filterSize, [...hashFns, txtCode].map( (code) => runCode(code) ));    \n        } else {\n            alert(\"Please write a valid JavaScript pure function with a string argument.\");\n        }\n    }\n\n    const changeFilterSize = (val) => {\n        console.log(\"Val Entered = \", val);\n        setFilterSize(val);\n        props.onChange(val, [...hashFns]);\n    }\n    \n\n    return (\n        <div>\n            <div style={{ borderStyle: 'ridge', paddingTop: 5, paddingRight: 5, paddingLeft: 5, paddingBottom: 5}}>\n                <h4>Filter Size</h4> \n                <input id=\"filSize\" type=\"number\" min={5} max={50} placeholder=\"Filter Size\" onChange={(e) => changeFilterSize(Number(e.target.value))} value={filterSize} /><br /><br />\n            </div>\n\n            <div style={{ borderStyle: 'ridge', paddingTop: 5, paddingRight: 5, paddingLeft: 5, paddingBottom: 5 }}>\n                <h4>Hash Functions</h4>\n\n                <p>\n                    <ul>\n                    <li>Your hash functions should be a valid JavaScript functions with 1 string argument.</li>\n                    <li>These functions also need to be Pure Functions which implies that<br/> they should give same output for a given input everytime irrespective of external state.</li>\n                    </ul>\n                    \n                </p>\n            \n                <div style={{overflow: 'scroll', maxHeight: '200px'}}>\n                    {hashFns.map((hashFn, i) => HashFn(hashFn, i))}\n                </div>\n\n                <div style={{ borderStyle: 'none', paddingTop: 5, paddingRight: 5, paddingLeft: 5, paddingBottom: 5 }}>\n                    <textarea onChange={(e) => setTxtCode(e.target.value)} value={txtCode} rows={10} cols={76}></textarea><br/>\n                    <button onClick={() => addHashFn()}>Add Hash Function</button>\n                </div>\n            </div>    \n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport BloomFilterSetting from './BloomFilterSettings';\n\n\nfunction BloomEntry(props) {\n    return (\n        <div style={{width: 50, height: 50, backgroundColor: props.val ? '#59915B' : '#C1E3C2', borderColor: props.selected ? 'red' : 'black', borderStyle: 'solid'}}></div>\n    );\n}\n\nfunction delay(ms){\n    var ctr, rej, p = new Promise(function (resolve, reject) {\n        ctr = setTimeout(resolve, ms);\n        rej = reject;\n    });\n    p.cancel = function(){ clearTimeout(ctr); rej(Error(\"Cancelled\"))};\n    return p; \n}\n\nexport default function BloomFilter(props) {\n  \n    const [hashFns, setHashFns] = useState([]);\n    const [filterSize, setFilterSize] = useState(5);\n\n    const [bloomArray, setBloomArray] = useState(Array.from({length: 5}, () => false));\n    const [insElem, setInsElem] = useState('');\n    const [srchElem, setSrchElem] = useState('');\n\n    const [selectedIndices, setSelectedIndices] = useState(new Set());\n    const [findMsg, setFindMsg] = useState('');\n\n    const onParamChange = (xfilterSize, xhashFns) => {\n        console.log(hashFns);\n        console.log(xhashFns);\n        setFilterSize(xfilterSize);\n        setHashFns(xhashFns);\n    }\n\n    useEffect(() => {\n        console.log(\"Filter Size changed\");\n        setBloomArray(Array.from({length: filterSize}, () => false));\n    }, [filterSize]);\n\n    const getHashes = (item) => {\n        return hashFns.map((hashFn) => hashFn(item));\n    }\n\n    const findElement = async () => {\n        const hashes = getHashes(srchElem);\n\n        // Check the validity of hashes\n        let hashOk = true;\n\n        if (hashes.length === 0) {\n            hashOk = false;\n        }\n\n        hashes.forEach((hash) => {\n            try{\n                if (!(hash < filterSize && hash >= 0)) {\n                    alert(`One of the hash functions returned invalid hash ${hash}`);\n                    hashOk = false;\n                }\n            } catch(e) {\n                hashOk = false;\n            }\n            \n        });\n\n        \n        if (hashOk) {\n            let flag = true;\n\n            for (let hash of hashes) {\n                if (!bloomArray[hash]) {\n                    flag = false;\n                }\n\n                selectedIndices.add(hash);\n                setSelectedIndices(new Set([...selectedIndices]));\n                await delay(300);\n\n                if (!flag) break;\n            }\n\n            if (flag) {\n                setFindMsg(`${srchElem} might have been inserted before but NOT SURE!`);\n            } else {\n                setFindMsg(`${srchElem} is not inserted before for sure!`);\n            }\n\n            setTimeout(() => setSelectedIndices(new Set([])), 2000)\n            \n        } else {\n            alert('One or more problems with your hash functions are detected');\n        }\n    };\n\n    const insertElement = async () => {\n        if (insElem) {\n            const hashes = getHashes(insElem);\n\n            // Check the validity of hashes\n            let hashOk = true;\n\n            if (hashes.length === 0) {\n                hashOk = false;\n            }\n\n            hashes.forEach((hash) => {\n                try{\n                    if (!(hash < filterSize && hash >= 0)) {\n                        alert(`One of the hash functions returned invalid hash ${hash}`);\n                        hashOk = false;\n                    }\n                } catch(e) {\n                    hashOk = false;\n                }\n                \n            });\n\n            \n            if (hashOk) {\n                const temp = [...bloomArray];\n                for (let hash of hashes) {\n                    temp[hash] = true;\n                    selectedIndices.add(hash);\n                    setSelectedIndices(new Set([...selectedIndices]));\n                    await delay(300);\n                };\n\n                setBloomArray(temp);\n                \n                setTimeout(() => setSelectedIndices(new Set([])), 2000)\n                \n            } else {\n                alert('One or more problems with your hash functions are detected');\n            }\n        }\n    };\n    \n    return (\n        <div className=\"grid-container\">\n            <BloomFilterSetting onChange={onParamChange} />\n\n            <div style={{overflow: 'scroll', maxHeight: '100vh', minWidth: '70px'}}>\n                {bloomArray.map((val, i) => <BloomEntry key={i} val={val} selected={selectedIndices.has(i)} />)}\n            </div>\n            <div>\n                <h3>Insert</h3>\n                <input type=\"text\" value={insElem} onChange={(e) => setInsElem(e.target.value)} />\n                <button onClick={insertElement} disabled={!(hashFns.length > 0) || !insElem}>Add</button>\n\n                <h3>Search</h3>\n                <input type=\"text\" value={srchElem} onChange={(e) => setSrchElem(e.target.value)} />\n                <button onClick={findElement} disabled={!(hashFns.length > 0) || !srchElem}>Find</button>\n                <p>\n                    <b>\n                        {findMsg}\n                    </b>\n                </p>\n            </div>\n        </div>\n        \n    );\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BloomFilter from './components/BloomFilter';\n\nfunction App() {\n\n  return (\n    <div>\n      <header>\n        <h2 style={{textAlign: 'center'}}>Bloom Filter Visualizer</h2>\n        <hr/>\n      </header>\n      <BloomFilter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}